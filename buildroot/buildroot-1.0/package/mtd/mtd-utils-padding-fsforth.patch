*** mtd-utils-1.0.0_target/util/mkfs.jffs2.c	Sun Apr 30 22:59:15 2006
--- mtd-utils-1.0.0_tool/util/mkfs.jffs2.c	Tue Mar 27 13:54:03 2007
***************
*** 700,705 ****
--- 700,731 ----
  	}
  }
  
+ static void padmarker(void)
+ {
+         char zero = 0;
+         
+         int len = page_size - ( out_ofs % page_size );
+         struct jffs2_unknown_node padmarker;
+ 
+         if( len < sizeof( padmarker ) )
+                 return;
+ 
+         memset( &padmarker, 0, sizeof( padmarker ) );
+ 
+         padmarker.magic    = cpu_to_je16(JFFS2_MAGIC_BITMASK);
+         padmarker.nodetype = cpu_to_je16(JFFS2_NODETYPE_PADDING);
+         padmarker.totlen   = cpu_to_je32(len);
+         padmarker.hdr_crc  = cpu_to_je32(crc32(0, &padmarker, sizeof(struct jffs2_unknown_node)-4));
+ 
+         full_write(out_fd, &padmarker, sizeof(padmarker));
+ 
+         /* fill remaining data with 0 (to distinguish it from unused) */
+         len -= sizeof( padmarker );
+ 
+ 	while( len-- )
+                 full_write(out_fd, &zero, 1 );
+ }
+ 
  static void pad(int req)
  {
  	while (req) {
***************
*** 1128,1136 ****
--- 1154,1164 ----
  	recursive_populate_directory(root);
  
  	if (pad_fs_size == -1) {
+ 		padmarker();
  		padblock();
  	} else {
  		if (pad_fs_size && add_cleanmarkers){
+ 			padmarker();
  			padblock();
  			while (out_ofs < pad_fs_size) {
  				full_write(out_fd, &cleanmarker, sizeof(cleanmarker));
***************
*** 1138,1147 ****
  				padblock();
  			}
  		} else {
  			while (out_ofs < pad_fs_size) {
  				full_write(out_fd, ffbuf, min(sizeof(ffbuf), pad_fs_size - out_ofs));
  			}
- 
  		}
  	}
  }
--- 1166,1177 ----
  				padblock();
  			}
  		} else {
+ 			if( pad_fs_size )
+ 				/* selected at all */
+ 				padmarker();
  			while (out_ofs < pad_fs_size) {
  				full_write(out_fd, ffbuf, min(sizeof(ffbuf), pad_fs_size - out_ofs));
  			}
  		}
  	}
  }

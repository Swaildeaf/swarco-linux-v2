# -*- shell-script -*-
#*****************************************************************************
#* 
#*  @file          comgt_gprs.scr
#*
#*  comgt script file to talk to GPRS terminal adapters
#*  (tested Siemens MC35i)
#*
#*  @version       1.0 (\$Revision$)
#*  @author        Guido Classen <br>
#*                 Weiss-Electronic GmbH
#* 
#*  $LastChangedBy$  
#*  $Date$
#*  $URL$
#*
#*  @par Modification History:
#*    2007-12-03 gc: initial version
#*  
#*****************************************************************************
#
#
# set echo on
#
#  $m => Terminal adapter type (Emtpy = Unknown)
  let $m=""
  let $d=$env("GPRS_DEVICE")
  if len($d)=0 let $d="/dev/com1"
  open com $d
#
  let $b=$env("GPRS_BAUDRATE")
  if len($b)=0 let $b="115200"
  print "Starting GPRS connection on device ",$d," (",$b,"baud)^j"
  set com $b+"n81"
  set senddelay 0.05
#
# Test if device is connected
#
:device_detect
  flash 0.1
  send "ATi^m"
  waitfor 5 "OK" "SIEMENS"
  if % = -1 goto device_hangup
  if % = 0 goto start
  if % = 1 goto device_siemens
#
:device_hangup
  sleep 1
  send "+++"
  sleep 1
  send "AT^m"
  waitfor 5 "OK"
  if % = 0 goto device_detect
#
  print "Terminal adapter not responding, check if device is powered on and connected properly.\n"
  sleep 5
  goto err_exit
#
:device_siemens
  waitfor 5 "MC35" "HC25"
  if % = 0 let $m="MC35"
  if % = 1 let $m="HC25"

#
#
#
:start
  if $m="MC35"  print "Found Siemens MC35 GPRS terminal adapter^j"
  if $m="HC25"  print "Found Siemens HC25 UMTS/GPRS terminal adapter^j"
  if len($m)=0  print "Found unknown terminal adapter^j"

  flash 0.1
  send "AT+CPIN?^m"
  waitfor 30 "SIM PUK","SIM PIN","READY","ERROR","ERR"
  if % = -1 goto error
  if % = 0 goto ready
  if % = 1 goto getpin
  if % = 2 goto ready
  if % = 3 goto error
  if % = 4 goto error
:error
  print $s," ***SIM ERROR***\n"
  goto err_exit
#
:getpin
  let $x=$env("GPRS_PIN")
  let a=len($x)
  if a=0 goto pinenverr
  if a<>4 goto pinerror
  let c=0
:test
  let $c=$mid($x,c,1)
  if $c<"0" goto pinerror
  if $c>"9" goto pinerror
  inc c
  if c<4 goto test
  let a=val($x)
  if a<0 goto pinerror
  if a>9999 goto pinerror
  let $c=$left($x,4)
:enterpin
#  let $p="AT+CPIN=\""+$c+"\"^m"
#  print "send pin:",$p,"^j"
  send "AT+CPIN=\""
  send $c
  send "\"^m"
  waitfor 20 "OK","ERR"
  if % = -1 goto timeerror
  if % = 0 goto ready
  if % = 1 goto pinerror
:pinenverr
  print "ERROR: The GPRS_PIN env variable is not set\n"
  goto err_exit
:pinerror
  print "ERROR: PIN code must be 4 decimal digits only\n"
  print "Caution! - entering the wrong PIN code three times will lock the SIM\n"
  goto err_exit
:timeerror
  print "ERROR: timeout, device did not respond to PIN command entry.\n"
  goto err_exit
:ready
  print "SIM ready\n"
#
# $o operator numeric code
# $p mode
# $q Network access type
  let $o=""
  let $p="0"
  let $o=$env("GPRS_OPERATOR")
  let $q=$env("GPRS_NET_ACCESS_TYPE")
  if len($o)=0 goto oper_set
  if val($o)<>0 let $p="1"
:oper_set
  if $p="1" print "Setting manual selected operator to ",$o,"^j"
  let $a="AT+COPS="+$p+",2,\""+$o+"\""
  if $m="HC25" goto oper_umts
  goto skip_umts
:oper_umts
  if len($q)>0 let $a=$a+","+$q
  let c=0
:skip_umts
  print "send oper: "+$a+"\n"
  waitquiet 1 0.1
  send $a+"^m" 
  waitfor 20 "OK","ERR"
  if % = 0 goto oper_OK
:oper_error
  inc c
  if c<4 goto skip_umts
  print "ERROR setting manual operator\n"
  goto err_exit
:oper_ok
#
#
  print "Waiting for Registration..(120 sec max)"
  let c = 0
:waitreg
  waitquiet 1 0.1
  send "AT+CREG?^m"
  waitfor 2 "OK" "+CREG: 0,1","+CREG: 0,5"
  if % = -1 goto reg_noresponse
  if % = 0 goto regagain
  if % = 1 goto homereg
  if % = 2 goto roamreg
:regagain
  if c > 120 goto regtimeout
  let c=c+2
  print "."
  goto waitreg
:reg_noresponse
  print "^jError: No response from terminal adapter on AT+CREG?\n"
  goto err_exit
:regtimeout
  print "^jFailed to register\n"
  goto err_exit
:homereg
  print "^j"
  let $n="Registered on home network: "
  goto registered
:roamreg
  print "^j"
  let $n="Registered on roaming network: "
  goto registered
:registered
# reset operator format to alphanumeric 16 characters
  send "AT+COPS=3,0^m"
  waitfor 20 "OK","ERR"
# Query current operator
  waitquiet 1 0.1
  send "AT+COPS?^m"
  get 2 "^m" $s
  get 2 "^m" $s
  let a=len($s)
  let b=a-12
  if b < 1 goto regtimeout
  let $c=$right($s,b)
  print $n,$c,"^j"
  let c=0
#
# send user supplied init string
  let $a=$env("GPRS_INIT")
  if len($a)=0 goto skip_init
  waitquiet 1 0.1

  let $t="Result User Init ("+$a+"): "
  gosub sub_at_query
:skip_init
#
  gosub sub_query_info
#
# SET APN
#
:getapn
  let $x=$env("GPRS_APN")
  let a=len($x)
  if a=0 goto apn_error
  if a>32 goto apn_error
:enterapn
  print "Entering APN: ",$x,"^j"
  send "AT+CGDCONT=1,\"IP\",\""+$x+"\"^m"
  waitfor 20 "OK","ERR"
  if % = -1 goto apn_timeerror
  if % = 0 goto apn_OK
  if % = 1 goto apn_error
:apn_error
  print "ERROR entering APN\n"
  print "The GPRS_APN env variable is not set\n"
  exit 1
:apn_timeerror
  print "ERROR entering APN\n"
  print "The device timeout.\n"
  goto err_exit
:apn_OK
#
# Dial GPRS
#
  print "Dialing\n"
  send "ATD *99**PPP*1#^m"
  waitfor 90 "CONNECT","ERR"
  if % = -1 goto dial_timeerror
  if % = 0 goto dial_CONNECT
  if % = 1 goto dial_error
:dial_timeerror
  print "Dialing Timout\n"
  goto err_exit
:dial_error
  print "Error calling GPRS\n"
  goto err_exit
:dial_CONNECT
  print "Connected, starting pppd\n"
  let $u=$env("GPRS_USER")
  if len($u)>0 let $u="user "+$u
  let $o=$env("GPRS_PPP_OPTIONS")
  let $o="call gprs_comgt nolog nodetach "+$o+" "+$d+" "+$b+" "+$u
  print "ppp command line: ","/usr/sbin/pppd  "+$o,"^j"
  system "/usr/sbin/pppd "+$o
  print "pppd terminated\n"
  sleep 5
  system "fuser -k "+$d
  print "ready\n"
#exit successfully
  exit 0
#
#
#
#
#
:err_exit
#
# in case of an error send reset command to device
  print "Reseting terminal adapter^j"
  send "AT+CFUN=1,1^m"
  exit 1
#
#
# subroutine query info
# querys various informations per at commands and write them to the console
:sub_query_info
#
  print "querying status information from terminal adapater:\n"
#
  let $t="Terminal Adapter: "
  let $a="ATi"
  gosub sub_at_query
#
  let $t="IMEI:"
  let $a="AT+CGSN"
  gosub sub_at_query
#
  let $t="IMSI:"
  let $a="AT+CIMI"
  gosub sub_at_query
#
  let $t="SIM card id:"
  let $a="AT^^SCID"
  gosub sub_at_query
#
  let $t="Signal Quality:"
  let $a="AT+CSQ"
  gosub sub_at_query
#
  let $t="^^MONI:"
  let $a="AT^^MONI"
  gosub sub_at_ml_query
#
  let $t="^^MONP:"
  let $a="AT^^MONP"
  gosub sub_at_ml_query
#
# 
  return
#
#
#
#
# subroutine to query a parameter per AT-command an display
# result string in log
#
#  Parameter
#  $a AT-command
#  $t text string
#  $r temp variable
:sub_at_query
#  print "send:",$a,"\n"
  waitquiet 1 0.1
  send $a+"^m"
  waitfor 1 $a
  let $r=""
  let $a=""
:sub_at_loop
  get 1 "^m" $a
  # remove linefeeds
  if len($a)>0 let $a=$mid($a,1,999)
  if $a <> "OK" let $r=$r+" "+$a
  if $a = "OK" goto sub_at_print 
  if $a = "ERROR" goto sub_at_print 
  goto sub_at_loop
:sub_at_print
  print $t,$r,"\n"
  return

# subroutine like sub_at_query, but print multi line result
:sub_at_ml_query
#  print "send:",$a,"\n"
  waitquiet 1 0.1
  send $a+"^m"
  waitfor 1 $a
  let $r=""
  let $a=""
:sub_at_loop_ml
  get 1 "^m" $a
  # remove linefeeds
  if len($a)>0 let $a=$mid($a,1,999)
  if $a = "OK" return
  print $t,$a,"\n"
  if $a = "ERROR" return
  goto sub_at_loop_ml
#
